<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Ouh|%o}{r5_P/3`D6mPP" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="i;-fNc`Pda*.Cp5e*OCe" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace rovershield {" line1="    const PCA9685_ADDRESS = 0x40" line2="    const MODE1 = 0x00" line3="    const MODE2 = 0x01" line4="    const SUBADR1 = 0x02" line5="    const SUBADR2 = 0x03" line6="    const SUBADR3 = 0x04" line7="    const PRESCALE = 0xFE" line8="    const LED0_ON_L = 0x06" line9="    const LED0_ON_H = 0x07" line10="    const LED0_OFF_L = 0x08" line11="    const LED0_OFF_H = 0x09" line12="    const ALL_LED_ON_L = 0xFA" line13="    const ALL_LED_ON_H = 0xFB" line14="    const ALL_LED_OFF_L = 0xFC" line15="    const ALL_LED_OFF_H = 0xFD" line16="" line17="    /**" line18="     * The user can select the 8 steering gear controller." line19="     */" line20="    export enum Servos {" line21="        S1 = 0x08," line22="        S2 = 0x07," line23="        S3 = 0x06," line24="        S4 = 0x05," line25="     //   S5 = 0x04," line26="      //  S6 = 0x03," line27="      //  S7 = 0x02," line28="      //  S8 = 0x01" line29="    }" line30="" line31="    /**" line32="     * The user selects the 4-way dc motor." line33="     */" line34="    export enum Motors {" line35="        M1 = 0x1," line36="        M2 = 0x2," line37="        M3 = 0x3," line38="        M4 = 0x4," line39="        M5 = 0x5," line40="        M6 = 0x6" line41="    }" line42="" line43="    /**" line44="     * The user defines the motor rotation direction." line45="     */" line46="    export enum Dir {" line47="        //% blockId=&quot;CW&quot; block=&quot;CW&quot;" line48="        CW = 1," line49="        //% blockId=&quot;CCW&quot; block=&quot;CCW&quot;" line50="        CCW = -1," line51="    }" line52="" line53="  " line54="    let initialized = false" line55="" line56="    function i2cWrite(addr: number, reg: number, value: number) {" line57="        let buf = pins.createBuffer(2)" line58="        buf[0] = reg" line59="        buf[1] = value" line60="        pins.i2cWriteBuffer(addr, buf)" line61="    }" line62="" line63="    function i2cCmd(addr: number, value: number) {" line64="        let buf2 = pins.createBuffer(1)" line65="        buf2[0] = value" line66="        pins.i2cWriteBuffer(addr, buf2)" line67="    }" line68="" line69="    function i2cRead(addr: number, reg: number) {" line70="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line71="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line72="        return val;" line73="    }" line74="" line75="    function initPCA9685(): void {" line76="        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00)" line77="        setFreq(50);" line78="        initialized = true" line79="    }" line80="" line81="    function setFreq(freq: number): void {" line82="        // Constrain the frequency" line83="        let prescaleval = 25000000;" line84="        prescaleval /= 4096;" line85="        prescaleval /= freq;" line86="        prescaleval -= 1;" line87="        let prescale = prescaleval;//Math.floor(prescaleval + 0.5);" line88="        let oldmode = i2cRead(PCA9685_ADDRESS, MODE1);" line89="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line90="        i2cWrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep" line91="        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler" line92="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode);" line93="        control.waitMicros(5000);" line94="        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);" line95="    }" line96="" line97="    function setPwm(channel: number, on: number, off: number): void {" line98="        if (channel &lt; 0 || channel &gt; 15)" line99="            return;" line100="" line101="        let buf3 = pins.createBuffer(5);" line102="        buf3[0] = LED0_ON_L + 4 * channel;" line103="        buf3[1] = on &amp; 0xff;" line104="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;" line105="        buf3[3] = off &amp; 0xff;" line106="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;" line107="        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);" line108="    }" line109="" line110="    /**" line111="     * Steering gear control function." line112="     * S1~S8." line113="     * 0°~180°." line114="    */" line115="    //% blockId=rovershield_servo block=&quot;Servo|%index|degree|%degree&quot;" line116="    //% weight=100" line117="    //% degree.min=0 degree.max=180" line118="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=4" line119="    export function servo(index: Servos, degree: number): void {" line120="        if (!initialized) {" line121="            initPCA9685()" line122="        }" line123="        // 50hz" line124="        let v_us = (degree * 1800 / 180 + 600) // 0.6ms ~ 2.4ms" line125="        let value = v_us * 4096 / 20000" line126="        setPwm(index + 7, 0, value)" line127="    }" line128="" line129="    /**" line130="     * Execute a motor" line131="     * M1~M6." line132="     * speed(0~255)." line133="    */" line134="    //% weight=90" line135="    //% blockId=rovershield_MotorRun block=&quot;Motor|%index|dir|%Dir|speed|%speed&quot;" line136="    //% speed.min=0 speed.max=255" line137="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line138="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line139="    export function MotorRun(index: Motors, direction: Dir, speed: number): void {" line140="        if (!initialized) {" line141="            initPCA9685()" line142="        }" line143="        speed = speed * 16 * direction; // map 255 to 4096" line144="        if (speed &gt;= 4096) {" line145="            speed = 4095" line146="        }" line147="        if (speed &lt;= -4096) {" line148="            speed = -4095" line149="        }" line150="        if (index &gt; 6 || index &lt;= 0)" line151="            return" line152="        let pn = (4 - index) * 2" line153="        let pp = (4 - index) * 2 + 1" line154="        if (speed &gt;= 0) {" line155="            setPwm(pp, 0, speed)" line156="            setPwm(pn, 0, 0)" line157="        } else {" line158="            setPwm(pp, 0, 0)" line159="            setPwm(pn, 0, -speed)" line160="        }" line161="    }" line162="" line163="" line164="    /**" line165="     * Stop the dc motor." line166="    */" line167="    //% weight=20" line168="    //% blockId=rovershield_motorStop block=&quot;Motor stop|%index&quot;" line169="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2 " line170="    export function motorStop(index: Motors) {" line171="        setPwm((4 - index) * 2, 0, 0);" line172="        setPwm((4 - index) * 2 + 1, 0, 0);" line173="    }" line174="" line175="    /**" line176="     * Stop all motors" line177="    */" line178=" " line179="    //% weight=10" line180="    //% blockId=rovershield_motorStopAll block=&quot;Motor Stop All&quot;" line181="    export function motorStopAll(): void {" line182="        for (let idx = 1; idx &lt;= 6; idx++) {" line183="            motorStop(idx);" line184="        }" line185="    }" line186="}" numlines="187"></mutation></block></statement></block></xml>